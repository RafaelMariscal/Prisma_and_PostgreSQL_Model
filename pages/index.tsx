import Head from 'next/head'
import { Button, Container, Divider, Form, Header, Icon, Image, Table } from 'semantic-ui-react'
import pkg from "semantic-ui-react/package.json";
import { Prisma } from '.prisma/client';
import { fetcher } from '../utils/fetcher';
import prisma from '../lib/prisma';
import { useState } from 'react';

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedCreateInput[] = await prisma.user.findMany()
  return {
    props: { initialUsers: users }
  }
}

const options = [
  { key: "m", text: "DEVELOPER", value: "DEVELOPER" },
  { key: "u", text: "USER", value: "USER" },
  { key: "a", text: "ADMIN", value: "ADMIN" },
]

export default function Home({ initialUsers }) {
  const [users, setUsers] = useState<Prisma.UserUncheckedCreateInput[]>(initialUsers)
  const [firstName, setFirstName] = useState("")
  const [lastName, setLastName] = useState("")
  const [email, setEmail] = useState("")
  const [avatar, setAvatar] = useState("")
  const [role, setRole] = useState()

  const handleRoleChange = (e, { value }) => setRole(value)

  const capitalizeFirsLetter = (s: string) => {
    if (typeof s !== "string") return ""
    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase()
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="stylesheet" href="http://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css" />
      </Head>
      <Container style={{ margin: 20 }} >
        <Header as={"h3"}>
          This is powered by NextJs, Semantic UI {pkg.version}
        </Header>

        <Form onSubmit={async () => {
          const body: Prisma.UserCreateInput = {
            firstName,
            lastName,
            role,
            email,
            avatar
          }

          await fetcher("/api/create", { user: body })
          await setUsers([...users, body])
          setFirstName("")
          setLastName("")
          setEmail("")
          setAvatar("")
          setRole(null)
        }}>

          <Form.Group widths="equal">
            <Form.Input
              fluid
              label="First Name"
              placeholder="First Name"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
            /><br />
            <Form.Input
              fluid
              label="Last Name"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
            /><br />

            <Form.Input
              fluid
              label="Email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            /><br />
            <Form.Input
              fluid
              label="Avatar"
              placeholder="Avatar"
              value={avatar}
              onChange={(e) => setAvatar(e.target.value)}
            /><br />
            <Form.Select
              fluid
              label="Role"
              placeholder="Role"
              options={options}
              value={role}
              onChange={handleRoleChange}
            />
          </Form.Group>

          <Form.Button>Submit</Form.Button>
        </Form>

        <Divider horizontal>Users</Divider>

        <Table basic="very" celled >
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>User</Table.HeaderCell>
              <Table.HeaderCell>Email</Table.HeaderCell>
              <Table.HeaderCell textAlign='center'>Action</Table.HeaderCell>
            </Table.Row>
          </Table.Header>

          <Table.Body >
            {
              users.map((user, index) => (
                <Table.Row key={user.id}>
                  <Table.Cell collapsing>
                    <Header as={"h4"} image>
                      <Image src={user.avatar} rounded size='mini' alt=""></Image>
                      <Header.Content>
                        {capitalizeFirsLetter(user.firstName) + " " + capitalizeFirsLetter(user.lastName)}
                        <Header.Subheader>{capitalizeFirsLetter(user.role)}</Header.Subheader>
                      </Header.Content>
                    </Header>
                  </Table.Cell>
                  <Table.Cell>{user.email}</Table.Cell>
                  <Table.Cell textAlign='center'>
                    <Button
                      animated="fade"
                      color='red'
                      onClick={async () => {
                        await fetcher("/api/delete", { id: user.id })
                        await setUsers(users.filter(usr => usr.id !== user.id))
                      }}>
                      <Button.Content visible>Delete</Button.Content>
                      <Button.Content hidden>
                        <Icon name="user delete" />
                      </Button.Content>
                    </Button>
                  </Table.Cell>
                </Table.Row>
              ))
            }
          </Table.Body>

        </Table>

      </Container>
    </>
  )
}
